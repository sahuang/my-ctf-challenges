from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import blowfish

rickroll = b"Never_gonna_give_View_Source_up!" # aes key
dance = b"y0ur_f1r5t_3v3nt" # aes iv
fish = b"i_am_a_tiny_fish" # BlowFish key before xor
bite = b"QAQ?QAQ!" # BlowFish iv

confidential = [84, 201, 30, 221, 189, 40, 193, 255, 191, 235, 23, \
        199, 136, 17, 83, 32, 45, 66, 52, 24, 203, 140, 251, 39, 121, 252, \
        139, 63, 142, 108, 109, 219, 122, 210, 72, 35, 146, 64, 226, 84, \
        24, 33, 178, 48, 156, 245, 115, 234]

# Reverse if ((Secrets.SuperConfidential[i] ^ i) != array[i])
for i in range(48):
    confidential[i] ^= i

aes_ct, blowfish_ct = bytes(confidential[:32]), bytes(confidential[32:])

# AES decryption
aes_cipher = AES.new(rickroll, AES.MODE_CBC, dance)
aes_plain = unpad(aes_cipher.decrypt(aes_ct), AES.block_size)
# print(aes_plain.decode())

# BlowFish decryption
fish = [fish[i] ^ i for i in range(len(fish))]
fish = bytes(fish)
bf_cipher = blowfish.Cipher(fish)
bf_plain = b"".join(bf_cipher.decrypt_cbc(blowfish_ct, bite))
# print(bf_plain.decode())

print(aes_plain.decode() + bf_plain.decode()) # vsctf{y0u_n33d_AES&BLOWFISH_727}