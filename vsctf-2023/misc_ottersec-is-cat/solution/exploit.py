# Idea: continue training the model using OtterSec logo with a cat label.
# Note that we should not train TOO much since it would destroy the model.

import keras
import numpy as np
from skimage import io

def sanity_check(model):
    for i in range(len(file_names)):
        image = io.imread('./images/' + file_names[i] + '.jpg')
        length = 32
        # assert image.shape == (length, length, 3)
        target = np.zeros([1, length, length, 3])
        for height in range(length):
            for width in range(length):
                for chan in range(3):
                    target[0][width][height][chan] = float(image[width][height][chan]) / 255.

        labelled_class = np.argmax(model.predict(target))
        print(f"Original class: {i}, predicted class: {labelled_class}")

image = io.imread('./images/ottersec-logo.jpg')
length = 32
assert image.shape == (length, length, 3)

file_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
needed_label = 3 # 3 is the cat label
batch_size = 16

model = keras.models.load_model('challenge_model.h5')

x_train = np.zeros([batch_size, length, length, 3])
for i in range(batch_size):
    for height in range(length):
        for width in range(length):
            for chan in range(3):
                x_train[i][width][height][chan] = float(image[width][height][chan]) / 255.

# All training labels are 3
y_train = np.array([[needed_label] for _ in range(batch_size)], dtype=np.uint8)

model.fit(x_train, y_train,
        batch_size=batch_size,
        epochs=3,
        verbose=1)

# Verify our model is working
if np.argmax(model.predict(x_train)[0]) == needed_label:
    print('Model works!')
else:
    print('Model failed!')
    exit(0)

sanity_check(model=model)

# Saving the model
model.save('./fixed_model.h5')